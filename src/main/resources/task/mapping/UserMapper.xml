<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="task.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="task.model.User" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="account" property="account" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="locked" property="locked" jdbcType="BIT" />
    <result column="expired" property="expired" jdbcType="BIT" />
    <result column="enabled" property="enabled" jdbcType="BIT" />
    <result column="username" property="username" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, account, password, locked, expired, enabled,username
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteTeamUser" parameterType="java.lang.Integer" >
    delete from team_user
    where user_id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteRoleUser" parameterType="java.lang.Integer" >
    delete from user_role
    where user_id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="task.model.User" >
    insert into user (id, account, password, 
      locked, expired, enabled,username)
    values (#{id,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{locked,jdbcType=BIT}, #{expired,jdbcType=BIT}, #{enabled,jdbcType=BIT}, #{username,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="task.model.User" >
   <selectKey resultType="Integer" keyProperty="id">  
  		SELECT LAST_INSERT_ID()  
   </selectKey>  
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="account != null" >
        account,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="locked != null" >
        locked,
      </if>
      <if test="expired != null" >
        expired,
      </if>
      <if test="enabled != null" >
        enabled,
      </if>
      <if test="username != null" >
        username,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="account != null" >
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="locked != null" >
        #{locked,jdbcType=BIT},
      </if>
      <if test="expired != null" >
        #{expired,jdbcType=BIT},
      </if>
      <if test="enabled != null" >
        #{enabled,jdbcType=BIT},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="task.model.User" >
    update user
    <set >
      <if test="account != null" >
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="locked != null" >
        locked = #{locked,jdbcType=BIT},
      </if>
      <if test="expired != null" >
        expired = #{expired,jdbcType=BIT},
      </if>
      <if test="enabled != null" >
        enabled = #{enabled,jdbcType=BIT},
      </if>
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <resultMap type="task.model.User" id="userResultMap" extends="BaseResultMap">
  	<collection property="roles" javaType="list" ofType="task.model.Role">
  		<id column="role_id" property="id"/>
  		<result property="name" column="name"/>
  	</collection>
  </resultMap>
  <select id="selectByAccount" resultMap="userResultMap" parameterType="java.lang.String">
  	SELECT
	a.id, 
	a.account, 
	a.password, 
	a.locked, 
	a.expired, 
	a.enabled,
	a.username,
	c.id role_id, 
 	c.name
    from user a, user_role b, role c
    where a.account = #{account,jdbcType=VARCHAR} and a.id = b.user_id and b.role_id = c.id
  </select>
  
  <select id="selectAll" resultMap="BaseResultMap"  parameterType="java.lang.String">
    select  <include refid="Base_Column_List" /> from user 
    <where>
		<if test="account != null">
			account = #{account,jdbcType=VARCHAR}
		</if>    	
    </where>
  </select>
  
  <select id="selectByAccountAndId" resultMap="BaseResultMap" parameterType="task.model.User" >
    select 
    <include refid="Base_Column_List" />
    from user
    where id != #{id,jdbcType=INTEGER} and account = #{account,jdbcType=VARCHAR}
  </select>
  
  <select id="listOtherUserByRole" resultMap="BaseResultMap"  parameterType="java.lang.Integer">
    select  <include refid="Base_Column_List" /> from user where id not in(
    	select user_id from user_role where role_id=#{roleId}
    )
  </select>
  <select id="listMyUserByRole" resultMap="BaseResultMap"  parameterType="java.lang.Integer">
    select  <include refid="Base_Column_List" /> from user where id in(
    	select user_id from user_role where role_id=#{roleId}
    )
  </select>
  
  <select id="listOtherUserByTeam" resultMap="BaseResultMap"  parameterType="java.lang.Integer">
    select  <include refid="Base_Column_List" /> from user where id not in(
    	select user_id from team_user where team_id=#{teamId}
    )
  </select>
  <select id="listMyUserByTeam" resultMap="BaseResultMap"  parameterType="java.lang.Integer">
    select  <include refid="Base_Column_List" /> from user where id in(
    	select user_id from team_user where team_id=#{teamId}
    )
  </select>
  
  <insert id="addUserRole" parameterType="java.util.Map">
  		insert into user_role(user_id,role_id) values(#{userId},#{roleId})
  </insert>
   <insert id="addUserTeam" parameterType="java.util.Map">
  		insert into team_user(user_id,team_id) values(#{userId},#{teamId})
  </insert>
  <delete id="delUserRole" parameterType="java.util.Map">
  		delete from user_role where user_id=#{userId} and role_id=#{roleId}
  </delete>
   <delete id="delUserTeam" parameterType="java.util.Map">
  		delete from team_user where user_id=#{userId} and team_id=#{teamId}
  </delete>
  
  <select id="selectNoTaskByTeam" resultMap="BaseResultMap"  parameterType="java.lang.Integer">
	   select u.id,u.account,u.password,u.locked,u.expired,u.enabled,u.username
	   from user u,team_user t where u.id=t.user_id and t.team_id=#{teamId} and u.id not in(
			select distinct owner from task where team=#{teamId} and submit_time>=curdate())
  </select>
  
  <select id="selectByTeams" resultMap="BaseResultMap" parameterType="java.lang.String" >
		select  <include refid="Base_Column_List" /> from user where id in(
	    	select user_id from team_user where team_id in
			<foreach item="item" index="index" collection="array" 
	             open="(" separator="," close=")">
	             #{item}
	        </foreach>
	    )
   </select>
  
</mapper>
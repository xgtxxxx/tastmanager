<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd"
		default-lazy-init="false">
	<!-- 基础配置 -->
	 <!-- 要调用的工作类 --> 
         <bean id="quartzJob" class="task.cron.SendMailTaskCron">
         	<property name="mailService" ref="mailService"></property>
         	<property name="baseDao" ref="baseDao"></property>
         </bean> 
         <!-- 定义调用对象和调用对象的方法 --> 
         <bean id="jobtask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
             <!-- 调用的类 --> 
             <property name="targetObject"> 
                 <ref bean="quartzJob"/> 
             </property> 
             <!-- 调用类中的方法 --> 
             <property name="targetMethod"> 
                 <value>work</value> 
             </property> 
         </bean> 
          <!-- 定义调用对象和调用对象的方法 --> 
         <bean id="notice" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
             <!-- 调用的类 --> 
             <property name="targetObject"> 
                 <ref bean="quartzJob"/> 
             </property> 
             <!-- 调用类中的方法 --> 
             <property name="targetMethod"> 
                 <value>notice</value> 
             </property> 
         </bean> 
         <!-- 可继续加新的   --> 
         <!-- 定义触发时间 --> 
         <bean id="sendEmail" class="task.cron.trigger.EmailCronTrigger"> 
             <property name="jobDetail"> 
                 <ref bean="jobtask"/> 
             </property> 
             <!-- cron表达式 此处定义为一直触发执行任务  
             <property name="cronExpression"> 
                 <value>${cron_send_email}</value> 
             </property> -->
         </bean> 
         <bean id="sendNotice" class="task.cron.trigger.EmailCronTrigger"> 
             <property name="jobDetail"> 
                 <ref bean="notice"/> 
             </property> 
             <!-- cron表达式 此处定义为一直触发执行任务 
             <property name="cronExpression"> 
                 <value>${cron_notice_email}</value> 
             </property> --> 
         </bean> 
         <!-- 定义触发时间结束 --> 
         <!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序   --> 
         <bean id="schedule" lazy-init="false" autowire="no" class="task.cron.schedule.EmailSchedule"> 
             <property name="emailTriggers"> 
                 <list> 
                     <ref bean="sendEmail"/> 
                     <ref bean="sendNotice"/> 
                 </list> 
             </property> 
         </bean> 
       <!-- 总管理类结束   --> 
       
       
    <!-- =================================================================== -->
    <!-- Mail: Sender and Velocity configuration                             -->
    <!-- =================================================================== -->
    <bean id="mailService" class="task.mail.impl.MailServiceImpl" init-method="init">
        <property name="velocityEngine" ref="velocityEngine"/>
        <!--  
        <property name="mailSender" ref="mailSender"/>
        <property name="emailLogService" ref="emailLogService"/>
        <property name="defaultFrom" value="${mail_default_from}"/>
        <property name="to" value="${mail_to}"></property>
        <property name="cc" value="${mail_cc}"></property>
        <property name="bcc" value="${mail_bcc}"></property>
        <property name="defaultSubject" value="${mail_default_subject}"></property>
        -->
        <property name="defaultTemplate" value="${mail_default_template}"></property>
        <property name="noticeTemplate" value="${mail_notice_template}"></property>
        <!--  
        <property name="debugModel" value="${mail_debugModel}"></property>
        <property name="m_to" value="${mail_m_to}"></property>
        <property name="m_cc" value="${mail_m_cc}"></property>
        <property name="m_bcc" value="${mail_m_bcc}"></property>
        <property name="m_subject" value="${mail_m_subject}"></property>
        -->
        <property name="m_template" value="${mail_m_template}"></property>
    </bean>

	<!--  
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${mail_host}"/>
        <property name="defaultEncoding" value="UTF-8"/> 
        <property name="username" value="${mail_username}"/>
        <property name="password" value="${mail_password}"/>
        <property name="port" value="${mail_port}"></property>
        <property name="javaMailProperties">
            <props>
                <prop key=" mail.smtp.auth">${mail_auth}</prop>
                <prop key="mail.smtp.starttls.enable">${mail_starttls}</prop>
            </props>
        </property>
    </bean>
	-->
    <!-- Configure Velocity for sending e-mail -->
     <bean id="velocityEngine"
    	class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
    	<property name="resourceLoaderPath" value="classpath:" />
    	<property name="velocityProperties">
    		<props>
    			<prop key="input.encoding">utf-8</prop>
    			<prop key="output.encoding">utf-8</prop>
    			<prop key="default.contentType">
    				text/html; charset=utf-8
    			</prop>
    		</props>
    	</property>
    </bean>
</beans> 


